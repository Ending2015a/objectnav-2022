habitat_config: "/src/configs/test/test_hm3d.train.rgbd.yaml"

macro:
  backbone:
    net_config:
      depth:
        type: cnn
        mlp_units: [512]
      # large_map:
      #   type: cnn
      #   mlp_units: [512]
      small_map:
        type: cnn
        mlp_units: [512]
      objectgoal:
        type: embed
        num_embed: 6
        embed_dim: 128
    fuse_config:
      type: mlp
      mlp_units: [512]

  goal_mapping:
    0: chair
    1: bed
    2: plant
    3: toilet
    4: tv_monitor
    5: sofa

  env_id: HabitatEnv-v4
  agent_type: sac2
  log_path: "/src/logs/kemono_agent/${macro.agent_type}/${macro.env_id}/"

  seq_len: 16
  batch_size: 64
  num_workers: 256
  group_size: 128


envs:
  env_id: ${macro.env_id}
  habitat_env:
    auto_stop: true
    enable_pitch: false
    enable_stop: false

  semantic_wrapper:
    goal_mapping: ${macro.goal_mapping}
    predictor_name: 'gt'

  semantic_map_builder:
    world_config: # this is used as the base config of map projector
      map_res: 0.03
      map_width: 300 # initial width and height
      map_height: 300
      trunc_height_max: 1.7
      width_offset: 0.0
      height_offset: 0.0
      clip_border: 10
      fill_value: 0
      to_global: true
      device: cuda
    local_config:
      map_res: 0.03
      map_width: 300
      map_height: 300
      width_offset: 150.0
      height_offset: 0.0
      fill_value: 0
      to_global: false
      center_mode: none
    maps_config: # each map will be an observation in the observation dict
      video_map: # for video
        type: world
        crop:
          center: camera
          width: 600
          height: 600
        smooth:
          dilate_size: 5
          dilate_iter: 2
          erode_size: 5
          erode_iter: 1
        colorize:
          draw_origin: true
          draw_camera: true
          draw_trajectory: true
          draw_goals: true
      # large_map:
      #   type: world2local # can be world, local, world2local
      #   crop:
      #     center: camera # can be camera, origin
      #     width: 600
      #     height: 600
      #   smooth:
      #     dilate_size: 5
      #     dilate_iter: 2
      #     erode_size: 5
      #     erode_iter: 1
      #   colorize:
      #     draw_origin: false
      #     draw_camera: false
      #     draw_trajectory: false
      #     draw_goals: false
      small_map:
        type: world2local
        crop:
          center: camera
          width: 300
          height: 300
        smooth:
          dilate_size: 3
          dilate_iter: 3
          erode_size: 3
          erode_iter: 3
        colorize:
          draw_origin: false
          draw_camera: false
          draw_trajectory: true
          draw_goals: false
    num_classes: 40
    walkable_labels: [2, 16] # floor, stairs
    ignore_labels: [0, 17, 20, 28, 38] # void, ceiling, towel, lightning, clothes
    layers_labels:
      - [1, 9, 24, 30] # wall, door, window, column, railing
      - [4, 16] # door, stairs
      - [7, 27, 31, 36, 37] # cabinet, fireplace, shelving, furniture, appliances
      - [3, 5, 10, 26, 34] # chair, table, sofa, counter, seating
      - [8, 11] # bed, cushion
      - [18, 23, 25] # toilet, shower, bathtub
      - [14] # plant
      - [22] # tv_monitor
    color_palette:
      - "#FFFFFF" # background
      - "#999999" # obstacles
      - "#F2F2F2" # walkable
      - "#999999" # layer 0
      - "#9EDAE5" # layer 1
      - "#FF871F" # layer 2
      - "#A55194" # layer 3
      - "#7A70E8" # layer 4
      - "#E7969C" # layer 5
      - "#09AE1B" # layer 6
      - "#D6616B" # layer 7
      - "#000000" # goal
    goal_mapping: ${macro.goal_mapping}
    render_maps: ['large_map', 'small_map']
    enable_goals: false

  clean_obs:
    obs_configs:
      depth:
        type: image
        resize:
          width: 180
          height: 180
          mode: 'nearest'
        channel_first: true
        invert_color: false
      # large_map:
      #   type: image
      #   resize:
      #     width: 128
      #     height: 128
      #     mode: 'nearest'
      #   channel_first: true
      #   invert_color: true
      small_map:
        type: image
        resize:
          width: 180
          height: 180
          mode: 'nearest'
        channel_first: true
        invert_color: true
      objectgoal:
        type: scalar
    video_config:
      image: ['rgb', 'seg_color', 'video_map']
      size: [[320, 240], [320, 240], [240, 240]]
      label: ['RGB', 'Segmentation', 'Topdown View']
      goal: 'objectgoal'
      goal_mapping: ${macro.goal_mapping}

  monitor:
    root_dir: "${macro.log_path}monitor/"
    video: True
    video_kwargs:
      interval: null
      fps: 10

  trajectory_recorder:
    interval: 1

  vec_envs:
    n_envs: 2
    gpus: [0, 1]

agent:
  type: ${macro.agent_type}
  runner:
    goal_mapping: ${macro.goal_mapping}
    report_n_episodes: 100
  policy:
    backbone: ${macro.backbone}
    hidden_units: 512
    mlp_units: [256] # 512 -> 256 -> n_actions
    skip_conn: false
    rnn_type: lstm
  value:
    backbone: ${macro.backbone}
    hidden_units: 512
    mlp_units: [256] # 512 -> 256 -> n_actions
    skip_conn: false
    rnn_type: lstm
  batch_size: ${macro.batch_size}
  value_estimate: softq # sac or softq
  learn_alpha: false # disable alpha learning
  init_alpha: 0.5
  entropy_scale: 0.2
  policy_lr: 3.0e-4
  value_lr: 3.0e-4
  alpha_lr: 3.0e-4
  loss_type: huber
  huber_delta: 0.01
  tau: 0.005
  gamma: 0.98
  warmup_steps: 10000
  n_steps: 32
  n_gradsteps: 32
  train_dataset: ${train_dataset}

train_dataset:
  # multiprocess:
  #   num_threads: 8
  #   env_vars: {}
  # prefetch: ${macro.group_size}
  stream_producer:
    # expert_stream:
    #   producer:
    #     data_root: "/src/logs/kemono_expert/${macro.env_id}/train/trajs/"
    #     glob_paths: "*.trajectory.npz"
    #     shuffle: true
    #   manager:
    #     max_to_keep: 2000
    #     clean_unused: false
    #   drawer:
    #     max_to_draw: 500
    #   zero_pad:
    #     chunk_size: ${macro.seq_len}
    policy_stream:
      producer:
        data_root: "${envs.monitor.root_dir}trajs/"
        glob_paths: "*.trajectory.npz"
        shuffle: true
      manager:
        max_to_keep: 2000
        clean_unused: true
      drawer:
        max_to_draw: 500
      zero_pad:
        chunk_size: ${macro.seq_len}
  dataset:
    num_workers: ${macro.num_workers}
    group_size: ${macro.group_size}
    seq_len: ${macro.seq_len}
    drop_remainder: false
  sampler:
    num_workers: ${macro.num_workers}
    batch_size: ${macro.batch_size}
    time_first: true
    drop_remainder: false

checkpoint:
  monitor: "train/avg_success"
  save_last: True
  save_top_k: 40
  mode: max
  every_n_epochs: 100
  verbose: True

trainer:
  max_epochs: 10000000
  accelerator: 'gpu'
  devices: [2]
  default_root_dir: "${macro.log_path}"
  sync_batchnorm: True

ddp:
  find_unused_parameters: true
